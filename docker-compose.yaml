services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 3

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=production
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health/ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    env_file:
      - .env.docker
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - BROKER_URL=redis://redis:6379/0
      - RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 3
  test:
    build:
      context: .
      dockerfile: Dockerfile.api # use same env as API to access HTTP routes
    env_file:
      - .env.docker
    depends_on:
      api:
        condition: service_healthy
    command: pytest tests/

volumes:
  redis-data:
